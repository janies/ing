package main

import (
	"fmt"
	"os"

	"github.com/google/gopacket/pcap"
)

// Test cases

// Benchmarks

// Example test cases

func Example_packets_icmp() {
	var handle *pcap.Handle
	handle, _ = pcap.OpenOffline("testdata/icmp.pcap")
	defer handle.Close()

	// CL options
	config.Debug.PrintPackets = true
	config.Debug.PrintFlows = false
	config.ActiveTimeout = 1800
	config.IdleTimeout = 300
	config.OutputPrefix = "/tmp/ing/output/"
	config.OutputRotationInterval = 5
	config.OutputSlug = "-icmp"

	// State
	stats.NumBytes = 0
	stats.NumDecoded = 0
	stats.NumTruncated = 0
	stats.TotalPackets = 0
	stats.TotalFlows = 0

	done := make(chan struct{})
	defer close(done)
	wg.Add(3)
	inPackets := GeneratePackets(done, handle)
	inFlows := AssignFlows(done, inPackets)
	WriteFlows(done, inFlows)
	wg.Wait()
	fmt.Printf("Processed %v packets (%v bytes) in %v flows with %v decoded, and %v truncated.\n",
		stats.TotalPackets, stats.NumBytes, stats.TotalFlows, stats.NumDecoded, stats.NumTruncated)
	os.RemoveAll(config.OutputPrefix)
	// Output:
	// 2006-10-01 18:14:09.03823  ICMPv4 100.10.20.7 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:09.03851  ICMPv4 100.10.20.3 -> 100.10.20.7, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:09.03964  ICMPv4 100.10.20.7 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:09.03972  ICMPv4 100.10.20.3 -> 100.10.20.7, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:14.39875  ICMPv4 100.10.20.8 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:14.39899  ICMPv4 100.10.20.3 -> 100.10.20.8, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:14.40013  ICMPv4 100.10.20.8 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:14.40043  ICMPv4 100.10.20.3 -> 100.10.20.8, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:20.28034  ICMPv4 100.10.20.10 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:20.28057  ICMPv4 100.10.20.3 -> 100.10.20.10, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:20.28175  ICMPv4 100.10.20.10 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:20.28200  ICMPv4 100.10.20.3 -> 100.10.20.10, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:24.22030  ICMPv4 100.10.20.9 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:24.22060  ICMPv4 100.10.20.3 -> 100.10.20.9, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:24.22165  ICMPv4 100.10.20.9 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:24.22180  ICMPv4 100.10.20.3 -> 100.10.20.9, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:58.19676  ICMPv4 100.10.20.12 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:58.19692  ICMPv4 100.10.20.3 -> 100.10.20.12, typecode: EchoReply, payload: 32
	// 2006-10-01 18:14:58.19741  ICMPv4 100.10.20.12 -> 100.10.20.3, typecode: EchoRequest, payload: 32
	// 2006-10-01 18:14:58.19762  ICMPv4 100.10.20.3 -> 100.10.20.12, typecode: EchoReply, payload: 32
	// 2006-10-01 18:19:09.05742  ICMPv4 100.10.20.4 -> 100.20.1.3, typecode: DestinationUnreachable(Port), payload: 28
	// 2006-10-01 18:19:09.05767  ICMPv4 100.10.20.4 -> 100.20.1.3, typecode: DestinationUnreachable(Port), payload: 28
	// 2006-10-01 18:19:09.12164  ICMPv4 100.10.20.4 -> 100.20.1.3, typecode: DestinationUnreachable(Port), payload: 28
	// Processed 23 packets (1690 bytes) in 11 flows with 23 decoded, and 0 truncated.
}

func Example_packets_icmp6EchoRequest() {
	var handle *pcap.Handle
	handle, _ = pcap.OpenOffline("testdata/icmp6-echo-request.pcap")
	defer handle.Close()

	// CL options
	config.Debug.PrintPackets = true
	config.Debug.PrintFlows = false
	config.ActiveTimeout = 1800
	config.IdleTimeout = 300
	config.OutputPrefix = "/tmp/ing/output/"
	config.OutputRotationInterval = 5
	config.OutputSlug = "-icmp6-echo-request"

	// State
	stats.NumBytes = 0
	stats.NumDecoded = 0
	stats.NumTruncated = 0
	stats.TotalPackets = 0
	stats.TotalFlows = 0

	done := make(chan struct{})
	defer close(done)
	wg.Add(3)
	inPackets := GeneratePackets(done, handle)
	inFlows := AssignFlows(done, inPackets)
	WriteFlows(done, inFlows)
	wg.Wait()
	fmt.Printf("Processed %v packets (%v bytes) in %v flows with %v decoded, and %v truncated.\n",
		stats.TotalPackets, stats.NumBytes, stats.TotalFlows, stats.NumDecoded, stats.NumTruncated)
	os.RemoveAll(config.OutputPrefix)
	// Output:
	// 2008-11-26 14:06:11.99416  ICMPv6 :: -> ff02::1, typecode: EchoRequest, payload: 0
	// 2008-11-26 14:06:11.99442  ICMPv6 ff02::1 -> ::, typecode: EchoReply, payload: 0
	// Processed 2 packets (124 bytes) in 2 flows with 2 decoded, and 0 truncated.
}

func Example_packets_tcpCompleteV4() {
	var handle *pcap.Handle
	handle, _ = pcap.OpenOffline("testdata/tcp-complete-v4.pcap")
	defer handle.Close()

	// CL options
	config.Debug.PrintPackets = true
	config.Debug.PrintFlows = false
	config.ActiveTimeout = 1800
	config.IdleTimeout = 300
	config.OutputPrefix = "/tmp/ing/output/"
	config.OutputRotationInterval = 5
	config.OutputSlug = "-tcp-complete-v4"

	// State
	stats.NumBytes = 0
	stats.NumDecoded = 0
	stats.NumTruncated = 0
	stats.TotalPackets = 0
	stats.TotalFlows = 0

	done := make(chan struct{})
	defer close(done)
	wg.Add(3)
	inPackets := GeneratePackets(done, handle)
	inFlows := AssignFlows(done, inPackets)
	WriteFlows(done, inFlows)
	wg.Wait()
	fmt.Printf("Processed %v packets (%v bytes) in %v flows with %v decoded, and %v truncated.\n",
		stats.TotalPackets, stats.NumBytes, stats.TotalFlows, stats.NumDecoded, stats.NumTruncated)
	os.RemoveAll(config.OutputPrefix)
	// Output:
	// 2009-04-27 16:00:04.06610  TCP 192.168.0.5:1449 -> 192.168.0.7:2111, payload: 0
	// 2009-04-27 16:00:04.08453  TCP 192.168.0.7:2111 -> 192.168.0.5:1449, payload: 0
	// 2009-04-27 16:00:04.08457  TCP 192.168.0.5:1449 -> 192.168.0.7:2111, payload: 0
	// 2009-04-27 16:00:07.17391  TCP 192.168.0.5:1449 -> 192.168.0.7:2111, payload: 0
	// 2009-04-27 16:00:07.17394  TCP 192.168.0.7:2111 -> 192.168.0.5:1449, payload: 0
	// Processed 5 packets (292 bytes) in 2 flows with 5 decoded, and 0 truncated.
}

func Example_packets_tcpCompleteV6() {
	var handle *pcap.Handle
	handle, _ = pcap.OpenOffline("testdata/tcp-complete-v6.pcap")
	defer handle.Close()

	// CL options
	config.Debug.PrintPackets = true
	config.Debug.PrintFlows = false
	config.ActiveTimeout = 1800
	config.IdleTimeout = 300
	config.OutputPrefix = "/tmp/ing/output/"
	config.OutputRotationInterval = 5
	config.OutputSlug = "-tcp-complete-v6"

	// State
	stats.NumBytes = 0
	stats.NumDecoded = 0
	stats.NumTruncated = 0
	stats.TotalPackets = 0
	stats.TotalFlows = 0

	done := make(chan struct{})
	defer close(done)
	wg.Add(3)
	inPackets := GeneratePackets(done, handle)
	inFlows := AssignFlows(done, inPackets)
	WriteFlows(done, inFlows)
	wg.Wait()
	fmt.Printf("Processed %v packets (%v bytes) in %v flows with %v decoded, and %v truncated.\n",
		stats.TotalPackets, stats.NumBytes, stats.TotalFlows, stats.NumDecoded, stats.NumTruncated)
	os.RemoveAll(config.OutputPrefix)
	// Output:
	// 2009-04-27 21:57:03.69150  TCP fe80::5.1449 -> fe80::7.2111, payload: 0
	// 2009-04-27 21:57:03.69306  TCP fe80::7.2111 -> fe80::5.1449, payload: 0
	// 2009-04-27 21:57:03.69461  TCP fe80::5.1449 -> fe80::7.2111, payload: 0
	// 2009-04-27 21:57:03.69615  TCP fe80::5.1449 -> fe80::7.2111, payload: 0
	// 2009-04-27 21:57:03.69770  TCP fe80::7.2111 -> fe80::5.1449, payload: 0
	// Processed 5 packets (392 bytes) in 2 flows with 5 decoded, and 0 truncated.
}

func Example_packets_vlan() {
	var handle *pcap.Handle
	handle, _ = pcap.OpenOffline("testdata/vlan.pcap")
	defer handle.Close()

	// CL options
	config.Debug.PrintPackets = true
	config.Debug.PrintFlows = false
	config.ActiveTimeout = 1800
	config.IdleTimeout = 300
	config.OutputPrefix = "/tmp/ing/output/"
	config.OutputRotationInterval = 5
	config.OutputSlug = "-vlan"

	// State
	stats.NumBytes = 0
	stats.NumDecoded = 0
	stats.NumTruncated = 0
	stats.TotalPackets = 0
	stats.TotalFlows = 0

	done := make(chan struct{})
	defer close(done)
	wg.Add(3)
	inPackets := GeneratePackets(done, handle)
	inFlows := AssignFlows(done, inPackets)
	WriteFlows(done, inFlows)
	wg.Wait()
	fmt.Printf("Processed %v packets (%v bytes) in %v flows with %v decoded, and %v truncated.\n",
		stats.TotalPackets, stats.NumBytes, stats.TotalFlows, stats.NumDecoded, stats.NumTruncated)
	os.RemoveAll(config.OutputPrefix)
	// Output:
	// 1999-11-05 12:20:40.05622  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:40.05633  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 580
	// 1999-11-05 12:20:40.06389  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:40.06398  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 280
	// 1999-11-05 12:20:40.06455  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:40.06584  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 1448
	// 1999-11-05 12:20:40.06588  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 568
	// 1999-11-05 12:20:40.06602  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:40.06611  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:40.07036  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 1024
	// 1999-11-05 12:20:40.07051  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:40.07154  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.07490  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 156
	// 1999-11-05 12:20:40.07542  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 112
	// 1999-11-05 12:20:40.07652  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 264
	// 1999-11-05 12:20:40.07708  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.07758  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 112
	// 1999-11-05 12:20:40.08194  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 264
	// 1999-11-05 12:20:40.08255  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.08344  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.08446  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:40.08532  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.08615  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.08696  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.08726  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:40.08808  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 516
	// 1999-11-05 12:20:40.09034  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.09109  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:40.09169  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.09236  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 344
	// 1999-11-05 12:20:40.09309  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 516
	// 1999-11-05 12:20:40.09403  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:40.09436  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.09458  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:40.09818  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 8
	// 1999-11-05 12:20:40.09843  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 32
	// 1999-11-05 12:20:40.10442  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 192
	// 1999-11-05 12:20:40.10634  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 448
	// 1999-11-05 12:20:40.11203  UDP 131.151.5.55:138 -> 131.151.5.255:138, payload: 201
	// 1999-11-05 12:20:40.11299  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 532
	// 1999-11-05 12:20:40.11486  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 832
	// 1999-11-05 12:20:40.11621  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 104
	// 1999-11-05 12:20:40.11724  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.11792  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.16235  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 128
	// 1999-11-05 12:20:40.17870  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:40.25826  ICMPv4 131.151.6.171 -> 131.151.32.129, typecode: EchoRequest, payload: 1469
	// 1999-11-05 12:20:40.25841  ICMPv4 131.151.32.129 -> 131.151.6.171, typecode: EchoReply, payload: 1469
	// 1999-11-05 12:20:40.82942  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 32
	// 1999-11-05 12:20:40.84874  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:40.84871  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 96
	// 1999-11-05 12:20:40.85101  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.85921  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 128
	// 1999-11-05 12:20:40.86119  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:40.88042  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:40.99930  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 128
	// 1999-11-05 12:20:41.00108  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:41.00901  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 128
	// 1999-11-05 12:20:41.01121  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:41.01883  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 96
	// 1999-11-05 12:20:41.03875  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:41.08850  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.08859  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 596
	// 1999-11-05 12:20:41.09102  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.09111  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 640
	// 1999-11-05 12:20:41.09122  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 588
	// 1999-11-05 12:20:41.09235  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.09242  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:41.09300  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:41.09370  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.09377  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 596
	// 1999-11-05 12:20:41.09485  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.09493  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:41.09532  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 176
	// 1999-11-05 12:20:41.09550  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:41.09762  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:41.09840  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:41.10044  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:41.10123  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:41.10258  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 104
	// 1999-11-05 12:20:41.10300  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:41.10340  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 20
	// 1999-11-05 12:20:41.10463  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 468
	// 1999-11-05 12:20:41.10611  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 224
	// 1999-11-05 12:20:41.10673  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 16
	// 1999-11-05 12:20:41.10723  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:41.11042  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:41.11080  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 28
	// 1999-11-05 12:20:41.11119  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 64
	// 1999-11-05 12:20:41.11240  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.11247  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 24
	// 1999-11-05 12:20:41.11334  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 824
	// 1999-11-05 12:20:41.11539  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:41.11546  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 588
	// 1999-11-05 12:20:41.11589  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 260
	// 1999-11-05 12:20:41.11604  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:41.13043  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:41.25787  ICMPv4 131.151.6.171 -> 131.151.32.129, typecode: EchoRequest, payload: 1469
	// 1999-11-05 12:20:41.25803  ICMPv4 131.151.32.129 -> 131.151.6.171, typecode: EchoReply, payload: 1469
	// 1999-11-05 12:20:41.52179  UDP 131.151.104.96:137 -> 131.151.107.255:137, payload: 50
	// 1999-11-05 12:20:42.06307  UDP 131.151.32.71:138 -> 131.151.32.255:138, payload: 201
	// 1999-11-05 12:20:42.10771  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:42.10779  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:42.11029  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:42.11036  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 588
	// 1999-11-05 12:20:42.11047  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 448
	// 1999-11-05 12:20:42.11163  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:42.11170  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 600
	// 1999-11-05 12:20:42.11229  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:42.11292  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:42.11298  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:42.11402  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:42.11409  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 92
	// 1999-11-05 12:20:42.11465  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:42.11568  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:42.11645  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:42.11708  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:42.11786  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 512
	// 1999-11-05 12:20:42.12043  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 8
	// 1999-11-05 12:20:42.12093  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:42.12178  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 28
	// 1999-11-05 12:20:42.12284  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 468
	// 1999-11-05 12:20:42.13040  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:42.14040  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:42.19970  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.20923  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.21875  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.25787  ICMPv4 131.151.6.171 -> 131.151.32.129, typecode: EchoRequest, payload: 1469
	// 1999-11-05 12:20:42.25804  ICMPv4 131.151.32.129 -> 131.151.6.171, typecode: EchoReply, payload: 1469
	// 1999-11-05 12:20:42.25930  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.26982  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.27276  UDP 131.151.104.96:137 -> 131.151.107.255:137, payload: 50
	// 1999-11-05 12:20:42.27875  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.27945  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.28998  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.29081  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:42.31042  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:42.31998  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.32082  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:42.32942  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.34876  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.34950  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 64
	// 1999-11-05 12:20:42.36876  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.49031  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 96
	// 1999-11-05 12:20:42.49966  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:42.50878  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.51877  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 0
	// 1999-11-05 12:20:42.51968  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 64
	// 1999-11-05 12:20:42.52197  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 824
	// 1999-11-05 12:20:42.71876  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 824
	// 1999-11-05 12:20:42.71922  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:43.02384  UDP 131.151.104.96:137 -> 131.151.107.255:137, payload: 50
	// 1999-11-05 12:20:43.07976  UDP 131.151.5.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.08339  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:43.08348  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 584
	// 1999-11-05 12:20:43.08458  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:43.08465  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 584
	// 1999-11-05 12:20:43.08523  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:43.08593  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:43.08600  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:43.08639  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 96
	// 1999-11-05 12:20:43.08701  UDP 131.151.6.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.08738  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:43.08745  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 596
	// 1999-11-05 12:20:43.08804  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:43.08850  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1080
	// 1999-11-05 12:20:43.09086  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:43.09207  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 8
	// 1999-11-05 12:20:43.09395  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:43.09473  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 28
	// 1999-11-05 12:20:43.09581  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 468
	// 1999-11-05 12:20:43.09654  UDP 131.151.1.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.10039  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:43.11042  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:43.11533  UDP 131.151.10.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.17050  UDP 131.151.20.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.18382  UDP 131.151.32.79:138 -> 131.151.32.255:138, payload: 201
	// 1999-11-05 12:20:43.25041  UDP 131.151.32.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.25788  ICMPv4 131.151.6.171 -> 131.151.32.129, typecode: EchoRequest, payload: 1469
	// 1999-11-05 12:20:43.25802  ICMPv4 131.151.32.129 -> 131.151.6.171, typecode: EchoReply, payload: 1469
	// 1999-11-05 12:20:43.36334  UDP 131.151.107.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.36821  UDP 131.151.111.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:43.37514  UDP 131.151.115.254:520 -> 255.255.255.255:520, payload: 24
	// 1999-11-05 12:20:44.09115  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 8
	// 1999-11-05 12:20:44.09145  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:44.10078  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 28
	// 1999-11-05 12:20:44.10188  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 468
	// 1999-11-05 12:20:44.10351  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:44.10359  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 584
	// 1999-11-05 12:20:44.10524  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:44.10532  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 584
	// 1999-11-05 12:20:44.10590  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:44.10646  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 96
	// 1999-11-05 12:20:44.10792  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:44.10800  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 592
	// 1999-11-05 12:20:44.11097  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1448
	// 1999-11-05 12:20:44.11105  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 596
	// 1999-11-05 12:20:44.11162  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:44.11305  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 1080
	// 1999-11-05 12:20:44.11431  TCP 131.151.32.129:1162 -> 131.151.32.21:6000, payload: 132
	// 1999-11-05 12:20:44.12038  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:44.13037  TCP 131.151.32.21:6000 -> 131.151.32.129:1162, payload: 0
	// 1999-11-05 12:20:44.25789  ICMPv4 131.151.6.171 -> 131.151.32.129, typecode: EchoRequest, payload: 1469
	// 1999-11-05 12:20:44.25804  ICMPv4 131.151.32.129 -> 131.151.6.171, typecode: EchoReply, payload: 1469
	// 1999-11-05 12:20:44.42089  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:44.42300  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 880
	// 1999-11-05 12:20:44.42382  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 880
	// 1999-11-05 12:20:44.42428  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 0
	// 1999-11-05 12:20:44.50109  TCP 131.151.32.21:6000 -> 131.151.32.129:1173, payload: 32
	// 1999-11-05 12:20:44.50262  TCP 131.151.32.129:1173 -> 131.151.32.21:6000, payload: 880
	// Processed 395 packets (101663 bytes) in 19 flows with 210 decoded, and 0 truncated.
}
